--- a/src/comunicationsmanagerfilesockets.cpp
+++ b/src/comunicationsmanagerfilesockets.cpp
@@ -140,14 +140,14 @@ int ComunicationsManagerFileSockets::initialize()
     MegaFileSystemAccess *fsAccess = new MegaFileSystemAccess();
     char csocketsFolder[34]; // enough to hold all numbers up to 64-bits
     sprintf(csocketsFolder, "/tmp/megaCMD_%d", getuid());
-    string socketsFolder = csocketsFolder;
+    auto socketsFolder = LocalPath::fromPath(csocketsFolder, *fsAccess);
 
     fsAccess->setdefaultfolderpermissions(0700);
-    fsAccess->rmdirlocal(&socketsFolder);
-    LOG_debug << "CREATING sockets folder: " << socketsFolder << "!!!";
-    if (!fsAccess->mkdirlocal(&socketsFolder, false))
+    fsAccess->rmdirlocal(socketsFolder);
+    LOG_debug << "CREATING sockets folder: " << csocketsFolder << "!!!";
+    if (!fsAccess->mkdirlocal(socketsFolder, false))
     {
-        LOG_fatal << "ERROR CREATING sockets folder: " << socketsFolder << ": " << errno;
+        LOG_fatal << "ERROR CREATING sockets folder: " << csocketsFolder << ": " << errno;
     }
     delete fsAccess;
 
--- a/src/configurationmanager.cpp
+++ b/src/configurationmanager.cpp
@@ -129,11 +129,10 @@ void ConfigurationManager::loadConfigDir()
     configFolder = sconfigDir.str();
 #endif
 
-    string localConfigFolder;
     MegaFileSystemAccess *fsAccess = new MegaFileSystemAccess();
     fsAccess->setdefaultfolderpermissions(0700);
-    fsAccess->path2local(&configFolder, &localConfigFolder);
-    if (!is_file_exist(configFolder.c_str()) && !fsAccess->mkdirlocal(&localConfigFolder, true))
+    auto localConfigFolder = LocalPath::fromPath(configFolder, *fsAccess);
+    if (!is_file_exist(configFolder.c_str()) && !fsAccess->mkdirlocal(localConfigFolder, true))
     {
         LOG_err << "Config folder not created";
     }
--- a/src/megacmdexecuter.cpp
+++ b/src/megacmdexecuter.cpp
@@ -995,7 +995,7 @@ bool MegaCmdExecuter::checkAndInformPSA(
 
 bool MegaCmdExecuter::checkNoErrors(int errorCode, string message)
 {
-    MegaError e(errorCode);
+    MegaErrorPrivate e(errorCode);
     return checkNoErrors(&e, message);
 }
 
@@ -1451,10 +1451,9 @@ void MegaCmdExecuter::dumpNodeSummary(MegaNode *n, const char *timeFormat, std::
 
 void MegaCmdExecuter::createOrModifyBackup(string local, string remote, string speriod, int numBackups)
 {
-    string locallocal;
-    fsAccessCMD->path2local(&local, &locallocal);
+    auto locallocal = LocalPath::fromPath(local, *fsAccessCMD);
     std::unique_ptr<FileAccess> fa = fsAccessCMD->newfileaccess();
-    if (!fa->isfolder(&locallocal))
+    if (!fa->isfolder(locallocal))
     {
         setCurrentOutCode(MCMD_NOTFOUND);
         LOG_err << "Local path must be an existing folder: " << local;
@@ -1784,10 +1783,9 @@ bool MegaCmdExecuter::TestCanWriteOnContainingFolder(string *path)
         fsAccessCMD->local2path(&firstpartlocal, &containingFolder);
     }
 
-    string localcontainingFolder;
-    fsAccessCMD->path2local(&containingFolder, &localcontainingFolder);
+    auto localcontainingFolder = LocalPath::fromPath(containingFolder, *fsAccessCMD);
     std::unique_ptr<FileAccess> fa = fsAccessCMD->newfileaccess();
-    if (!fa->isfolder(&localcontainingFolder))
+    if (!fa->isfolder(localcontainingFolder))
     {
         setCurrentOutCode(MCMD_INVALIDTYPE);
         LOG_err << containingFolder << " is not a valid Download Folder";
@@ -3109,10 +3107,9 @@ void MegaCmdExecuter::uploadNode(string path, MegaApi* api, MegaNode *node, stri
     }
     unescapeifRequired(path);
 
-    string locallocal;
-    fsAccessCMD->path2local(&path, &locallocal);
+    auto locallocal = LocalPath::fromPath(path, *fsAccessCMD);
     std::unique_ptr<FileAccess> fa = fsAccessCMD->newfileaccess();
-    if (!fa->fopen(&locallocal, true, false))
+    if (!fa->fopen(locallocal, true, false))
     {
         setCurrentOutCode(MCMD_NOTFOUND);
         LOG_err << "Unable to open local path: " << path;
@@ -3871,10 +3868,9 @@ bool MegaCmdExecuter::IsFolder(string path)
 #ifdef _WIN32
     replaceAll(path,"/","\\");
 #endif
-    string localpath;
-    fsAccessCMD->path2local(&path, &localpath);
+    auto localpath = LocalPath::fromPath(path, *fsAccessCMD);
     std::unique_ptr<FileAccess> fa = fsAccessCMD->newfileaccess();
-    return fa->isfolder(&localpath);
+    return fa->isfolder(localpath);
 }
 
 void MegaCmdExecuter::printTransfersHeader(const unsigned int PATHSIZE, bool printstate)
@@ -4509,12 +4505,11 @@ string MegaCmdExecuter::getLPWD()
 {
     string relativePath = ".";
     string absolutePath = "Unknown";
-    string localRelativePath;
-    fsAccessCMD->path2local(&relativePath, &localRelativePath);
-    string localAbsolutePath;
-    if (fsAccessCMD->expanselocalpath(&localRelativePath, &localAbsolutePath))
+    auto localRelativePath = LocalPath::fromPath(relativePath, *fsAccessCMD);
+    LocalPath localAbsolutePath;
+    if (fsAccessCMD->expanselocalpath(localRelativePath, localAbsolutePath))
     {
-        fsAccessCMD->local2path(&localAbsolutePath, &absolutePath);
+        absolutePath = localAbsolutePath.toPath(*fsAccessCMD);
     }
 
     return absolutePath;
@@ -4874,11 +4869,10 @@ bool MegaCmdExecuter::establishBackup(string pathToBackup, MegaNode *n, int64_t
     bool attendpastbackups = true; //TODO: receive as parameter
     static int backupcounter = 0;
     string path;
-    string localrelativepath;
-    string localabsolutepath;
-    fsAccessCMD->path2local(&pathToBackup, &localrelativepath);
-    fsAccessCMD->expanselocalpath(&localrelativepath, &localabsolutepath);
-    fsAccessCMD->local2path(&localabsolutepath, &path);
+    auto localrelativepath = LocalPath::fromPath(pathToBackup, *fsAccessCMD);
+    LocalPath localabsolutepath;
+    fsAccessCMD->expanselocalpath(localrelativepath, localabsolutepath);
+    path = localabsolutepath.toPath(*fsAccessCMD);
 
     MegaCmdListener *megaCmdListener = new MegaCmdListener(api, NULL);
     api->setBackup(path.c_str(), n, attendpastbackups, period, speriod.c_str(), numBackups, megaCmdListener);
@@ -7062,9 +7056,8 @@ void MegaCmdExecuter::executecommand(vector<string> words, map<string, int> *clf
     {
         if (words.size() > 1)
         {
-            string localpath;
-            fsAccessCMD->path2local(&words[1], &localpath);
-            if (fsAccessCMD->chdirlocal(&localpath)) // maybe this is already checked in chdir
+            auto localpath = LocalPath::fromPath(words[1], *fsAccessCMD);
+            if (fsAccessCMD->chdirlocal(localpath)) // maybe this is already checked in chdir
             {
                 LOG_debug << "Local folder changed to: " << words[1];
             }
@@ -7723,11 +7716,10 @@ void MegaCmdExecuter::executecommand(vector<string> words, map<string, int> *clf
         if (words.size() == 3)
         {
             string path;
-            string localrelativepath;
-            string localabsolutepath;
-            fsAccessCMD->path2local(&words[1], &localrelativepath);
-            fsAccessCMD->expanselocalpath(&localrelativepath, &localabsolutepath);
-            fsAccessCMD->local2path(&localabsolutepath, &path);
+            auto localrelativepath = LocalPath::fromPath(words[1], *fsAccessCMD);
+            LocalPath localabsolutepath;
+            fsAccessCMD->expanselocalpath(localrelativepath, localabsolutepath);
+            path = localabsolutepath.toPath(*fsAccessCMD);
             MegaNode* n = nodebypath(words[2].c_str());
             if (n)
             {
