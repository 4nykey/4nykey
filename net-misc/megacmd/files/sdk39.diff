--- a/src/comunicationsmanagerfilesockets.cpp
+++ b/src/comunicationsmanagerfilesockets.cpp
@@ -142,12 +142,12 @@ int ComunicationsManagerFileSockets::initialize()
     MegaFileSystemAccess *fsAccess = new MegaFileSystemAccess();
     char csocketsFolder[34]; // enough to hold all numbers up to 64-bits
     sprintf(csocketsFolder, "/tmp/megaCMD_%d", getuid());
-    LocalPath socketsFolder = LocalPath::fromLocalname(csocketsFolder);
+    LocalPath socketsFolder = LocalPath::fromPlatformEncoded(csocketsFolder);
 
     fsAccess->setdefaultfolderpermissions(0700);
     fsAccess->rmdirlocal(socketsFolder);
     LOG_debug << "CREATING sockets folder: " << socketsFolder.toPath(*fsAccess) << "!!!";
-    if (!fsAccess->mkdirlocal(socketsFolder, false))
+    if (!fsAccess->mkdirlocal(socketsFolder, false, false))
     {
         LOG_fatal << "ERROR CREATING sockets folder: " << socketsFolder.toPath(*fsAccess) << ": " << errno;
     }
--- a/src/configurationmanager.cpp
+++ b/src/configurationmanager.cpp
@@ -132,7 +132,7 @@ void ConfigurationManager::loadConfigDir()
     MegaFileSystemAccess *fsAccess = new MegaFileSystemAccess();
     fsAccess->setdefaultfolderpermissions(0700);
     LocalPath localConfigFolder = LocalPath::fromPath(configFolder, *fsAccess);
-    if (!is_file_exist(configFolder.c_str()) && !fsAccess->mkdirlocal(localConfigFolder, true))
+    if (!is_file_exist(configFolder.c_str()) && !fsAccess->mkdirlocal(localConfigFolder, true, false))
     {
         LOG_err << "Config folder not created";
     }
--- a/src/listeners.cpp
+++ b/src/listeners.cpp
@@ -383,17 +383,17 @@ void MegaCmdMegaListener::onChatsUpdate(MegaApi *api, MegaTextChatList *chats)
 
 #ifdef ENABLE_BACKUPS
 //backup callbacks:
-void MegaCmdMegaListener::onBackupStateChanged(MegaApi *api,  MegaBackup *backup)
+void MegaCmdMegaListener::onBackupStateChanged(MegaApi *api,  MegaScheduledCopy *backup)
 {
     LOG_verbose << " At onBackupStateChanged: " << backupSatetStr(backup->getState());
 }
 
-void MegaCmdMegaListener::onBackupStart(MegaApi *api, MegaBackup *backup)
+void MegaCmdMegaListener::onBackupStart(MegaApi *api, MegaScheduledCopy *backup)
 {
     LOG_verbose << " At onBackupStart";
 }
 
-void MegaCmdMegaListener::onBackupFinish(MegaApi* api, MegaBackup *backup, MegaError* error)
+void MegaCmdMegaListener::onBackupFinish(MegaApi* api, MegaScheduledCopy *backup, MegaError* error)
 {
     LOG_verbose << " At onBackupFinish";
     if (error->getErrorCode() == MegaError::API_EEXPIRED)
@@ -406,12 +406,12 @@ void MegaCmdMegaListener::onBackupFinish(MegaApi* api, MegaBackup *backup, MegaE
     }
 }
 
-void MegaCmdMegaListener::onBackupUpdate(MegaApi *api, MegaBackup *backup)
+void MegaCmdMegaListener::onBackupUpdate(MegaApi *api, MegaScheduledCopy *backup)
 {
     LOG_verbose << " At onBackupUpdate";
 }
 
-void MegaCmdMegaListener::onBackupTemporaryError(MegaApi *api, MegaBackup *backup, MegaError* error)
+void MegaCmdMegaListener::onBackupTemporaryError(MegaApi *api, MegaScheduledCopy *backup, MegaError* error)
 {
     LOG_verbose << " At onBackupTemporaryError";
     if (error->getErrorCode() != MegaError::API_OK)
@@ -461,7 +461,7 @@ void MegaCmdListener::doOnRequestFinish(MegaApi* api, MegaRequest *request, Mega
                 sync_struct *oldsync = ((sync_struct*)( *itr ).second );
 
                 MegaNode * node = api->getNodeByHandle(oldsync->handle);
-                api->resumeSync(oldsync->localpath.c_str(), node, oldsync->fingerprint, new MegaCmdListenerFuncExecuter([g, oldsync, node](mega::MegaApi* api, mega::MegaRequest *request, mega::MegaError *e)
+                api->enableSync(oldsync->handle, new MegaCmdListenerFuncExecuter([g, oldsync, node](mega::MegaApi* api, mega::MegaRequest *request, mega::MegaError *e)
                 {
                     std::unique_ptr<char []>nodepath (api->getNodePath(node));
 
@@ -484,7 +484,7 @@ void MegaCmdListener::doOnRequestFinish(MegaApi* api, MegaRequest *request, Mega
                         LOG_err << "Failed to resume sync: " << oldsync->localpath << " to " << nodepath.get();
                     }
                     delete node;
-                }, true));
+                }));
             }
 #endif
             informProgressUpdate(PROGRESS_COMPLETE, request->getTotalBytes(), this->clientID, "Fetching nodes");
--- a/src/listeners.h
+++ b/src/listeners.h
@@ -203,11 +203,11 @@ public:
 #endif
 
 #ifdef ENABLE_BACKUPS
-    virtual void onBackupStateChanged(mega::MegaApi *api,  mega::MegaBackup *backup);
-    virtual void onBackupStart(mega::MegaApi *api, mega::MegaBackup *backup);
-    virtual void onBackupFinish(mega::MegaApi* api, mega::MegaBackup *backup, mega::MegaError* error);
-    virtual void onBackupUpdate(mega::MegaApi *api, mega::MegaBackup *backup);
-    virtual void onBackupTemporaryError(mega::MegaApi *api, mega::MegaBackup *backup, mega::MegaError* error);
+    virtual void onBackupStateChanged(mega::MegaApi *api,  mega::MegaScheduledCopy *backup);
+    virtual void onBackupStart(mega::MegaApi *api, mega::MegaScheduledCopy *backup);
+    virtual void onBackupFinish(mega::MegaApi* api, mega::MegaScheduledCopy *backup, mega::MegaError* error);
+    virtual void onBackupUpdate(mega::MegaApi *api, mega::MegaScheduledCopy *backup);
+    virtual void onBackupTemporaryError(mega::MegaApi *api, mega::MegaScheduledCopy *backup, mega::MegaError* error);
 #endif
 
 protected:
--- a/src/megacmdexecuter.cpp
+++ b/src/megacmdexecuter.cpp
@@ -1145,11 +1145,6 @@ void MegaCmdExecuter::dumpNode(MegaNode* n, const char *timeFormat, std::map<std
             case MegaNode::TYPE_FILE:
                 OUTSTREAM << sizeToText(n->getSize(), false);
 
-                const char* p;
-                if (( p = strchr(n->getAttrString()->c_str(), ':')))
-                {
-                    OUTSTREAM << ", has attributes " << p + 1;
-                }
 
                 if (INVALID_HANDLE != n->getPublicHandle())
 //            if (n->isExported())
@@ -1468,10 +1463,10 @@ void MegaCmdExecuter::createOrModifyBackup(string local, string remote, string s
 
     if (!speriod.size())
     {
-        MegaBackup *backup = api->getBackupByPath(local.c_str());
+        MegaScheduledCopy *backup = api->getScheduledCopyByPath(local.c_str());
         if (!backup)
         {
-            backup = api->getBackupByTag(toInteger(local, -1));
+            backup = api->getScheduledCopyByTag(toInteger(local, -1));
         }
         if (backup)
         {
@@ -1497,10 +1492,10 @@ void MegaCmdExecuter::createOrModifyBackup(string local, string remote, string s
 
     if (numBackups == -1)
     {
-        MegaBackup *backup = api->getBackupByPath(local.c_str());
+        MegaScheduledCopy *backup = api->getScheduledCopyByPath(local.c_str());
         if (!backup)
         {
-            backup = api->getBackupByTag(toInteger(local, -1));
+            backup = api->getScheduledCopyByTag(toInteger(local, -1));
         }
         if (backup)
         {
@@ -1522,10 +1517,10 @@ void MegaCmdExecuter::createOrModifyBackup(string local, string remote, string s
     }
     else
     {
-        MegaBackup *backup = api->getBackupByPath(local.c_str());
+        MegaScheduledCopy *backup = api->getScheduledCopyByPath(local.c_str());
         if (!backup)
         {
-            backup = api->getBackupByTag(toInteger(local, -1));
+            backup = api->getScheduledCopyByTag(toInteger(local, -1));
         }
         if (backup)
         {
@@ -1776,13 +1771,13 @@ bool MegaCmdExecuter::TestCanWriteOnContainingFolder(string *path)
 #ifdef _WIN32
     replaceAll(*path,"/","\\");
 #endif
-    string localpath;
-    fsAccessCMD->path2local(path, &localpath);
-    size_t lastpart = fsAccessCMD->lastpartlocal(&localpath);
+    LocalPath localpath = LocalPath::fromPlatformEncoded(*path);
+    size_t lastpart = localpath.getLeafnameByteIndex(*fsAccessCMD);
     string containingFolder = ".";
     if (lastpart)
     {
-        string firstpartlocal(localpath, 0, lastpart - fsAccessCMD->localseparator.size());
+        FileSystemType fstype = fsAccessCMD->client->fsaccess->getlocalfstype(localpath);
+        string firstpartlocal(localpath.toName(*fsAccessCMD, fstype), 0, lastpart - sizeof(LocalPath::localPathSeparator));
         fsAccessCMD->local2path(&firstpartlocal, &containingFolder);
     }
 
@@ -2478,7 +2473,6 @@ void MegaCmdExecuter::fetchNodes(MegaApi *api, int clientID)
 
     // This is the actual acting upon fetch nodes ended correctly:
 
-    api->enableTransferResumption();
 
     MegaNode *cwdNode = ( cwd == UNDEF ) ? NULL : api->getNodeByHandle(cwd);
     if (( cwd == UNDEF ) || !cwdNode)
@@ -4152,7 +4146,7 @@ void MegaCmdExecuter::printBackupSummary(int tag, const char * localfolder, cons
               << endl;
 }
 
-void MegaCmdExecuter::printBackupDetails(MegaBackup *backup, const char *timeFormat)
+void MegaCmdExecuter::printBackupDetails(MegaScheduledCopy *backup, const char *timeFormat)
 {
     if (backup)
     {
@@ -4192,7 +4186,7 @@ void MegaCmdExecuter::printBackupDetails(MegaBackup *backup, const char *timeFor
     }
 }
 
-void MegaCmdExecuter::printBackupHistory(MegaBackup *backup, const char *timeFormat, MegaNode *parentnode, const unsigned int PATHSIZE)
+void MegaCmdExecuter::printBackupHistory(MegaScheduledCopy *backup, const char *timeFormat, MegaNode *parentnode, const unsigned int PATHSIZE)
 {
     bool firstinhistory = true;
     MegaStringList *msl = api->getBackupFolders(backup->getTag());
@@ -4270,7 +4264,7 @@ void MegaCmdExecuter::printBackupHistory(MegaBackup *backup, const char *timeFor
     }
 }
 
-void MegaCmdExecuter::printBackup(int tag, MegaBackup *backup, const char *timeFormat, const unsigned int PATHSIZE, bool extendedinfo, bool showhistory, MegaNode *parentnode)
+void MegaCmdExecuter::printBackup(int tag, MegaScheduledCopy *backup, const char *timeFormat, const unsigned int PATHSIZE, bool extendedinfo, bool showhistory, MegaNode *parentnode)
 {
     if (backup)
     {
@@ -4318,7 +4312,7 @@ void MegaCmdExecuter::printBackup(backup_struct *backupstruct, const char *timeF
 {
     if (backupstruct->tag >= 0)
     {
-        MegaBackup *backup = api->getBackupByTag(backupstruct->tag);
+        MegaScheduledCopy *backup = api->getScheduledCopyByTag(backupstruct->tag);
         if (backup)
         {
             printBackup(backupstruct->tag, backup, timeFormat, PATHSIZE, extendedinfo, showhistory);
@@ -4363,7 +4357,7 @@ void MegaCmdExecuter::printSync(int i, string key, const char *nodepath, sync_st
         string syncstate = "REMOVED";
         if (msync)
         {
-            syncstate = getSyncStateStr(msync->getState());
+            syncstate = getSyncStateStr(msync->getError());
         }
 
         string statetoprint;
@@ -4413,7 +4407,7 @@ void MegaCmdExecuter::printSync(int i, string key, const char *nodepath, sync_st
     string syncstate = "REMOVED";
     if (msync)
     {
-        syncstate = getSyncStateStr(msync->getState());
+        syncstate = getSyncStateStr(msync->getError());
     }
 
     string statetoprint;
@@ -4880,7 +4874,7 @@ bool MegaCmdExecuter::establishBackup(string pathToBackup, MegaNode *n, int64_t
     fsAccessCMD->expanselocalpath(localrelativepath, localabsolutepath);
 
     MegaCmdListener *megaCmdListener = new MegaCmdListener(api, NULL);
-    api->setBackup(localabsolutepath.toPath(*fsAccessCMD).c_str(), n, attendpastbackups, period, speriod.c_str(), numBackups, megaCmdListener);
+    api->setScheduledCopy(localabsolutepath.toPath(*fsAccessCMD).c_str(), n, attendpastbackups, period, speriod.c_str(), numBackups, megaCmdListener);
     megaCmdListener->wait();
     if (checkNoErrors(megaCmdListener->getError(), "establish backup"))
     {
@@ -6725,10 +6719,10 @@ void MegaCmdExecuter::executecommand(vector<string> words, map<string, int> *clf
             string local = words.at(1);
             unescapeifRequired(local);
 
-            MegaBackup *backup = api->getBackupByPath(local.c_str());
+            MegaScheduledCopy *backup = api->getScheduledCopyByPath(local.c_str());
             if (!backup)
             {
-                backup = api->getBackupByTag(toInteger(local, -1));
+                backup = api->getScheduledCopyByTag(toInteger(local, -1));
             }
             map<string, backup_struct *>::iterator itr;
             if (backup)
@@ -6767,7 +6761,7 @@ void MegaCmdExecuter::executecommand(vector<string> words, map<string, int> *clf
                 else if (abort)
                 {
                     MegaCmdListener *megaCmdListener = new MegaCmdListener(api, NULL);
-                    api->abortCurrentBackup(backup->getTag(), megaCmdListener);
+                    api->abortCurrentScheduledCopy(backup->getTag(), megaCmdListener);
                     megaCmdListener->wait();
                     if (checkNoErrors(megaCmdListener->getError(), "abort backup"))
                     {
@@ -7630,7 +7624,6 @@ void MegaCmdExecuter::executecommand(vector<string> words, map<string, int> *clf
 #ifdef ENABLE_SYNC
     else if (words[0] == "exclude")
     {
-        api->enableTransferResumption();
 
         if (getFlag(clflags, "a"))
         {
@@ -9572,7 +9565,7 @@ void MegaCmdExecuter::executecommand(vector<string> words, map<string, int> *clf
         }
         else
         {
-            api->logout(megaCmdListener);
+            api->logout(true, megaCmdListener);
         }
         actUponLogout(megaCmdListener, keepSession);
         if (keepSession)
--- a/src/megacmdexecuter.h
+++ b/src/megacmdexecuter.h
@@ -163,9 +163,9 @@ public:
 
     void printBackupHeader(const unsigned int PATHSIZE);
     void printBackupSummary(int tag, const char *localfolder, const char *remoteparentfolder, std::string status, const unsigned int PATHSIZE);
-    void printBackupHistory(mega::MegaBackup *backup, const char *timeFormat, mega::MegaNode *parentnode, const unsigned int PATHSIZE);
-    void printBackupDetails(mega::MegaBackup *backup, const char *timeFormat);
-    void printBackup(int tag, mega::MegaBackup *backup, const char *timeFormat, const unsigned int PATHSIZE, bool extendedinfo = false, bool showhistory = false, mega::MegaNode *parentnode = NULL);
+    void printBackupHistory(mega::MegaScheduledCopy *backup, const char *timeFormat, mega::MegaNode *parentnode, const unsigned int PATHSIZE);
+    void printBackupDetails(mega::MegaScheduledCopy *backup, const char *timeFormat);
+    void printBackup(int tag, mega::MegaScheduledCopy *backup, const char *timeFormat, const unsigned int PATHSIZE, bool extendedinfo = false, bool showhistory = false, mega::MegaNode *parentnode = NULL);
     void printBackup(backup_struct *backupstruct, const char *timeFormat, const unsigned int PATHSIZE, bool extendedinfo = false, bool showhistory = false);
 #endif
     void printSyncHeader(const unsigned int PATHSIZE, ColumnDisplayer *cd = nullptr);
--- a/src/megacmdutils.cpp
+++ b/src/megacmdutils.cpp
@@ -141,22 +141,22 @@ const char* getSyncStateStr(int state)
 {
     switch (state)
     {
-        case MegaSync::SYNC_FAILED:
+        case SYNC_FAILED:
             return "Failed";
 
             break;
 
-        case MegaSync::SYNC_CANCELED:
+        case SYNC_CANCELED:
             return "Canceled";
 
             break;
 
-        case MegaSync::SYNC_INITIALSCAN:
+        case SYNC_INITIALSCAN:
             return "InitScan";
 
             break;
 
-        case MegaSync::SYNC_ACTIVE:
+        case SYNC_ACTIVE:
             return "Active";
 
             break;
@@ -411,31 +411,31 @@ const char * getTransferStateStr(int transferState)
 
 string backupSatetStr(int backupstate)
 {
-    if (backupstate == MegaBackup::BACKUP_FAILED)
+    if (backupstate == MegaScheduledCopy::SCHEDULED_COPY_FAILED)
     {
         return "FAILED";
     }
-    if (backupstate == MegaBackup::BACKUP_CANCELED)
+    if (backupstate == MegaScheduledCopy::SCHEDULED_COPY_CANCELED)
     {
         return "CANCELED";
     }
-    if (backupstate == MegaBackup::BACKUP_INITIALSCAN)
+    if (backupstate == MegaScheduledCopy::SCHEDULED_COPY_INITIALSCAN)
     {
         return "INITIALSCAN";
     }
-    if (backupstate == MegaBackup::BACKUP_ACTIVE)
+    if (backupstate == MegaScheduledCopy::SCHEDULED_COPY_ACTIVE)
     {
         return "ACTIVE";
     }
-    if (backupstate == MegaBackup::BACKUP_ONGOING)
+    if (backupstate == MegaScheduledCopy::SCHEDULED_COPY_ONGOING)
     {
         return "ONGOING";
     }
-    if (backupstate == MegaBackup::BACKUP_SKIPPING)
+    if (backupstate == MegaScheduledCopy::SCHEDULED_COPY_SKIPPING)
     {
         return "SKIPPING";
     }
-    if (backupstate == MegaBackup::BACKUP_REMOVING_EXCEEDING)
+    if (backupstate == MegaScheduledCopy::SCHEDULED_COPY_REMOVING_EXCEEDING)
     {
         return "EXCEEDREMOVAL";
     }
