diff --git a/src/include/xmms/xmms_medialib.h b/src/include/xmms/xmms_medialib.h
--- a/src/include/xmms/xmms_medialib.h
+++ b/src/include/xmms/xmms_medialib.h
@@ -52,6 +52,9 @@
 #define XMMS_MEDIALIB_ENTRY_PROPERTY_ADDED "added"
 #define XMMS_MEDIALIB_ENTRY_PROPERTY_BPM "bpm"
 
+#define XMMS_MEDIALIB_ENTRY_PROPERTY_REFERENCED_URL "ref_url"
+#define XMMS_MEDIALIB_ENTRY_PROPERTY_START_TIME "start_time"
+#define XMMS_MEDIALIB_ENTRY_PROPERTY_SUBSONG_INDEX "subsong_index"
 
 typedef guint32 xmms_medialib_entry_t;
 typedef struct xmms_medialib_session_St xmms_medialib_session_t;
diff --git a/src/plugins/cue/Plugin b/src/plugins/cue/Plugin
new file mode 100644
--- /dev/null
+++ b/src/plugins/cue/Plugin
@@ -0,0 +1,16 @@
+"""
+This is a plugin build file for XMMS2
+"""
+
+# first we tell scons what our targets are
+target="cue"
+# then we tell scons where our sources are
+source=["cue.c", "cuesheet.c"]
+
+def config(env):
+	""" 
+	This function should return True if this module
+	is to be built otherwise False
+	"""
+	return True
+
diff --git a/src/plugins/cue/cue.c b/src/plugins/cue/cue.c
new file mode 100644
--- /dev/null
+++ b/src/plugins/cue/cue.c
@@ -0,0 +1,159 @@
+#include "xmms/xmms_defs.h"
+#include "xmms/xmms_plugin.h"
+#include "xmms/xmms_transport.h"
+#include "xmms/xmms_log.h"
+#include "xmms/xmms_plsplugins.h"
+#include "xmms/xmms_medialib.h"
+
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "cuesheet.h"
+
+static gboolean xmms_cue_read_playlist (xmms_transport_t *transport, guint playlist_id);
+static GString *xmms_cue_write_playlist (guint32 *list);
+
+#define CUESHEET_PROPERTY_STARTTIME "start_time"
+#define CUESHEET_PROPERTY_SUBSONG_INDEX "subsong_index"
+
+/*
+ * private static functions
+ */
+static gchar *xmms_cuesheet_callback(gpointer callback_data);
+
+/*
+ * Plugin header
+ */
+
+xmms_plugin_t *
+xmms_plugin_get (void)
+{
+	xmms_plugin_t *plugin;
+
+	plugin = xmms_plugin_new (XMMS_PLUGIN_TYPE_PLAYLIST, 
+				  XMMS_PLAYLIST_PLUGIN_API_VERSION,
+				  "cue",
+	                          "CUESHEET" XMMS_VERSION,
+	                          "CUESHEET plugin for XMMS2");
+
+	xmms_plugin_info_add (plugin, "Author", "SuperMMX");
+	xmms_plugin_info_add (plugin, "URL", "http://supermmx.org/linux/");
+
+	xmms_plugin_method_add (plugin, XMMS_PLUGIN_METHOD_READ_PLAYLIST, xmms_cue_read_playlist);
+	xmms_plugin_method_add (plugin, XMMS_PLUGIN_METHOD_WRITE_PLAYLIST, xmms_cue_write_playlist);
+
+	return plugin;
+}
+
+static gboolean xmms_cue_read_playlist (xmms_transport_t *transport, guint playlist_id)
+{
+    cuesheet_t *cuesheet = NULL;
+    cuesheet_track_t *track = NULL;
+    gchar *file_path = NULL;
+    xmms_medialib_session_t *session = NULL;
+
+    XMMS_DBG("CUE read playlist");
+    cuesheet = cuesheet_create(xmms_cuesheet_callback, transport);
+
+    if (g_path_is_absolute(cuesheet->file))
+    {
+	file_path = g_strdup(cuesheet->file);
+    }
+    else
+    {
+	const gchar *cue_path = xmms_transport_url_get (transport);
+	gchar *dir = g_path_get_dirname(cue_path);
+	file_path = g_build_filename(dir, cuesheet->file, NULL);
+    }
+
+    session = xmms_medialib_begin();
+
+    track = cuesheet->tracks;
+    while (track)
+    {
+	gchar *tmp;
+	xmms_medialib_entry_t entry;
+	gchar url[255];
+	cuesheet_track_index_t *index;
+
+	if (track->track_type != CUESHEET_TRACK_AUDIO)
+	{
+	    track = track->next_track;
+	    continue;
+	}
+	tmp = g_strdup_printf("%d", track->track_number);
+
+	memset(url, 0, 255);
+	strcat(url, file_path);
+	strcat(url, "#");
+	strcat(url, tmp);
+
+	XMMS_DBG("Dummy URL : %s", url);
+	entry = xmms_medialib_entry_new(session, url);
+
+	xmms_medialib_entry_property_set_int(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_SUBSONG_INDEX, track->track_number);
+	XMMS_DBG("Track Number : %s", tmp);
+	g_free(tmp);
+
+	xmms_medialib_entry_property_set_str(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_REFERENCED_URL, file_path);
+	XMMS_DBG("Referenced URL : %s", file_path);
+	xmms_medialib_entry_property_set_str(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_ALBUM, cuesheet->title);
+
+	index = track->indices;
+	if (index->index_number == 0)
+	    index = index->next_index;
+	if (index)
+	{
+	    xmms_medialib_entry_property_set_int(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_START_TIME, index->index_time);
+	    XMMS_DBG("Index Start Time: %d", index->index_time);
+	}
+	
+	XMMS_DBG("Title : %s", track->title);
+	XMMS_DBG("Performer : %s", track->performer);
+	xmms_medialib_entry_property_set_str(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_TITLE, track->title);
+	xmms_medialib_entry_property_set_str(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_ARTIST, track->performer);
+
+	if (track->next_track)
+	{
+	    cuesheet_track_index_t *next_track_index = track->next_track->indices;
+	    if (next_track_index->index_number == 0)
+		next_track_index = next_track_index->next_index;
+	    if (next_track_index)
+	    {
+		xmms_medialib_entry_property_set_int(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_DURATION, 
+						     next_track_index->index_time - index->index_time);
+	    }
+	}
+
+	xmms_medialib_playlist_add (session, playlist_id, entry);
+	
+	track = track->next_track;
+    }
+    xmms_medialib_end(session);
+
+    return TRUE;
+}
+
+/* will be implemented */
+static GString *xmms_cue_write_playlist (guint32 *list)
+{
+    return NULL;
+}
+
+static gchar *xmms_cuesheet_callback(gpointer callback_data)
+{
+    xmms_transport_t *transport = (xmms_transport_t *)callback_data;
+    gchar *buf;
+    xmms_error_t error;
+
+    memset(&error, 0, sizeof(xmms_error_t));
+    if (transport)
+    {
+	buf = g_new0(gchar, XMMS_TRANSPORT_MAX_LINE_SIZE);
+	buf = xmms_transport_read_line(transport, buf, &error);
+	return buf;
+    }
+
+    return NULL;
+}
diff --git a/src/plugins/cue/cuesheet.c b/src/plugins/cue/cuesheet.c
new file mode 100644
--- /dev/null
+++ b/src/plugins/cue/cuesheet.c
@@ -0,0 +1,276 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+
+#include "cuesheet.h"
+
+typedef enum
+{
+    CUESHEET_CATALOG = 0,
+    CUESHEET_CDTEXTFILE,
+    CUESHEET_FILE,
+    CUESHEET_FLAGS,
+    CUESHEET_INDEX,
+    CUESHEET_ISRC,
+    CUESHEET_PERFORMER,
+    CUESHEET_POSTGAP,
+    CUESHEET_PREGAP,
+    CUESHEET_REM,
+    CUESHEET_SONGWRITER,
+    CUESHEET_TITLE,
+    CUESHEET_TRACK
+} cuesheet_command_t;
+
+
+typedef struct
+{
+    gint code;
+    gchar *str;
+    gint str_len;
+} cuesheet_pair_t;
+
+#define CUESHEET_NULL_CODE -1
+
+static cuesheet_pair_t CUESHEET_COMMAND[] =
+{
+    {CUESHEET_CATALOG, "CATALOG ", 8},
+    {CUESHEET_CDTEXTFILE, "CDTEXTFILE ", 11},
+    {CUESHEET_FILE, "FILE ", 5},
+    {CUESHEET_FLAGS, "FLAGS ", 6},
+    {CUESHEET_INDEX, "INDEX ", 6},
+    {CUESHEET_ISRC, "ISRC ", 5},
+    {CUESHEET_PERFORMER, "PERFORMER ", 10},
+    {CUESHEET_POSTGAP, "POSTGAP ", 8},
+    {CUESHEET_PREGAP, "PREGAP ", 7},
+    {CUESHEET_REM, "REM ", 4},
+    {CUESHEET_SONGWRITER, "SONGWRITER ", 11},
+    {CUESHEET_TITLE, "TITLE ", 6},
+    {CUESHEET_TRACK, "TRACK ", 6},
+    {CUESHEET_NULL_CODE, NULL, 0}
+};
+
+static cuesheet_pair_t CUESHEET_FILE_TYPE[] =
+{
+    {CUESHEET_FILE_BINARY, "BINARY", 6},
+    {CUESHEET_FILE_MOTOROLA, "MOTOROLA", 8},
+    {CUESHEET_FILE_AIFF, "AIFF", 4},
+    {CUESHEET_FILE_WAVE, "WAVE", 4},
+    {CUESHEET_FILE_MP3, "MP3", 3},
+    {CUESHEET_NULL_CODE, NULL, 0},
+};
+
+static cuesheet_pair_t CUESHEET_TRACK_TYPE[] =
+{
+    {CUESHEET_TRACK_AUDIO, "AUDIO", 5},
+    {CUESHEET_TRACK_CDG, "CDG", 5},
+    {CUESHEET_TRACK_MODE1_2048, "MODE1/2048", 10},
+    {CUESHEET_TRACK_MODE1_2352, "MODE1/2352", 10},
+    {CUESHEET_TRACK_MODE2_2336, "MODE2/2336", 10},
+    {CUESHEET_TRACK_MODE2_2352, "MODE2/2352", 10},
+    {CUESHEET_TRACK_CDI_2336, "CDI/2336", 8},
+    {CUESHEET_TRACK_CDI_2352, "CDI/2352", 8},
+    {CUESHEET_NULL_CODE, NULL, 0}
+};
+
+static gint find_pair(gchar **ptr, cuesheet_pair_t *pairs);
+
+static gchar *get_quoted_str(gchar **ptr);
+static gint get_time(gchar **ptr);
+
+#define BUFFER_SIZE 255
+
+cuesheet_t *cuesheet_create(cuesheet_read_line_callback read_line_callback,
+			    gpointer data)
+{
+    cuesheet_t *cuesheet = NULL;
+    cuesheet_track_t *current_track = NULL;
+    cuesheet_track_t *last_track = NULL;
+    cuesheet_track_index_t *current_index = NULL;
+    cuesheet_track_index_t *last_index = NULL;
+    gint code;
+
+    gchar *line_ptr;
+    gchar *ptr;
+    gchar *temp_str = NULL;
+    gint track_number;
+    cuesheet_track_type_t track_type;
+    
+    cuesheet = g_new0(cuesheet_t, 1);
+
+    line_ptr = read_line_callback(data);
+    while (line_ptr)
+    {
+	ptr = line_ptr;
+
+	code = find_pair(&ptr, CUESHEET_COMMAND);
+	if (code != CUESHEET_NULL_CODE)
+	{
+	    switch (code)
+	    {
+	    case CUESHEET_TRACK:
+		track_number = atoi(ptr);
+		while (*ptr != ' ')
+		    ptr ++;
+		track_type = find_pair(&ptr, CUESHEET_TRACK_TYPE);
+		if (!current_track)
+		{
+		    current_track = g_new0(cuesheet_track_t, 1);
+		    cuesheet->tracks = current_track;
+		}
+		else
+		{
+		    last_track = current_track;
+		    current_track = g_new0(cuesheet_track_t, 1);
+		    last_track->next_track = current_track;
+		}
+		current_track->track_number = track_number;
+		current_track->track_type = track_type;
+
+		current_index = NULL;
+		last_index = NULL;
+		break;
+	    case CUESHEET_TITLE:
+		temp_str = get_quoted_str(&ptr);
+		if (current_track)
+		{
+		    current_track->title = temp_str;
+		}
+		else
+		{
+		    cuesheet->title = temp_str;
+		}
+		break;
+	    case CUESHEET_PERFORMER:
+		temp_str = get_quoted_str(&ptr);
+		if (current_track)
+		{
+		    current_track->performer = temp_str;
+		}
+		else
+		{
+		    cuesheet->performer = temp_str;
+		}
+		break;
+	    case CUESHEET_INDEX:
+		if (current_track)
+		{
+		    if (!current_index)
+		    {
+			current_index = g_new0(cuesheet_track_index_t , 1);
+			current_track->indices = current_index;
+		    }
+		    else
+		    {
+			last_index = current_index;
+			current_index = g_new0(cuesheet_track_index_t , 1);
+			last_index->next_index = current_index;
+		    }
+		    
+		    current_index->index_number = atoi(ptr);
+		    while (*ptr && *ptr != ' ')
+			ptr ++;
+		    current_index->index_time = get_time(&ptr);
+		}
+		break;
+	    case CUESHEET_FILE:
+		cuesheet->file = get_quoted_str(&ptr);
+		cuesheet->file_type = find_pair(&ptr, CUESHEET_FILE_TYPE);
+		break;
+	    default:
+		break;
+	    }
+	}
+	g_free(line_ptr);
+	line_ptr = read_line_callback(data);
+    }
+
+    return cuesheet;
+}
+
+gchar *get_quoted_str(gchar **ptr)
+{
+    gchar *temp_ptr = NULL;
+    gchar *result = NULL;
+
+    while (**ptr == ' ')
+	(*ptr) ++;
+    if (**ptr == '"')
+    {
+	(*ptr) ++;
+	temp_ptr = *ptr;
+	while (*temp_ptr != '"')
+	    temp_ptr ++;
+    }
+    else
+    {
+	temp_ptr = *ptr;
+	while (*temp_ptr != ' ' && *temp_ptr != '\0')
+	    temp_ptr ++;
+    }
+    result = g_strndup(*ptr, temp_ptr - *ptr);
+    *ptr = temp_ptr + 1;
+
+    return result;
+}
+
+void cuesheet_free(cuesheet_t *cuesheet)
+{
+    cuesheet_track_t *track, *temp_track;
+    if (cuesheet)
+    {
+	if (cuesheet->file)
+	    g_free(cuesheet->file);
+	if (cuesheet->performer)
+	    g_free(cuesheet->performer);
+	if (cuesheet->title)
+	    g_free(cuesheet->title);
+	if (cuesheet->catalog)
+	    g_free(cuesheet->catalog);
+	track = cuesheet->tracks;
+	while (track)
+	{
+	    if (track->title)
+		g_free(track->title);
+	    if (track->performer)
+		g_free(track->performer);
+	    temp_track = track;
+	    track = track->next_track;
+	    g_free(temp_track);
+	}
+	g_free(cuesheet);
+    }
+}
+
+gint get_time(gchar **ptr)
+{
+    gint min = 0, sec = 0, frame = 0;
+
+    while (**ptr == ' ')
+	(*ptr) ++;
+    min = atoi(*ptr);
+    while (**ptr != ':')
+	(*ptr) ++;
+    (*ptr) ++;
+    sec = atoi(*ptr);
+    while (**ptr != ':')
+	(*ptr) ++;
+    (*ptr) ++;
+    frame = atoi(*ptr);
+
+    return (min * 60 + sec) * 1000 + frame * 1000 / 75;
+}
+
+static gint find_pair(gchar **ptr, cuesheet_pair_t *pairs)
+{
+    while (**ptr == ' ')
+	(*ptr) ++;
+
+    while (pairs && pairs->str)
+    {
+	if (!strncmp(pairs->str, *ptr, pairs->str_len))
+	    break;
+	pairs ++;
+    }
+    (*ptr) += pairs->str_len;
+    return pairs->code;
+}
diff --git a/src/plugins/cue/cuesheet.h b/src/plugins/cue/cuesheet.h
new file mode 100644
--- /dev/null
+++ b/src/plugins/cue/cuesheet.h
@@ -0,0 +1,70 @@
+#ifndef CUESHEET_H
+#define CUESHEET_H
+
+#include <glib.h>
+
+typedef enum
+{
+    CUESHEET_FILE_BINARY = 0,
+    CUESHEET_FILE_MOTOROLA,
+    CUESHEET_FILE_AIFF,
+    CUESHEET_FILE_WAVE,
+    CUESHEET_FILE_MP3
+} cuesheet_file_type_t;
+
+typedef enum
+{
+    CUESHEET_TRACK_AUDIO = 0,
+    CUESHEET_TRACK_CDG,
+    CUESHEET_TRACK_MODE1_2048,
+    CUESHEET_TRACK_MODE1_2352,
+    CUESHEET_TRACK_MODE2_2336,
+    CUESHEET_TRACK_MODE2_2352,
+    CUESHEET_TRACK_CDI_2336,
+    CUESHEET_TRACK_CDI_2352
+} cuesheet_track_type_t;
+
+typedef struct CUESHEET_TRACK_INDEX_t cuesheet_track_index_t;
+
+struct CUESHEET_TRACK_INDEX_t
+{
+    gint index_number;
+    gint index_time; /* in ms */
+
+    cuesheet_track_index_t *next_index;
+};
+
+typedef struct CUESHEET_TRACK_t cuesheet_track_t;
+
+struct CUESHEET_TRACK_t
+{
+    gint track_number;
+    cuesheet_track_type_t track_type;
+    gchar *title;
+    gchar *performer;
+    gint pregap;
+    cuesheet_track_index_t *indices;
+    gint postgap;
+    
+    cuesheet_track_t *next_track;
+};
+
+typedef struct
+{
+    gchar *title;
+    gchar *performer;
+    gchar *catalog;
+    gchar *file;
+    cuesheet_file_type_t file_type;
+
+    cuesheet_track_t *tracks; /* only accept AUDIO */
+} cuesheet_t;
+
+/* user should allocate the buffer that contains the retruned line */
+typedef char *(*cuesheet_read_line_callback)(gpointer data);
+
+cuesheet_t *cuesheet_create(cuesheet_read_line_callback read_line_callback,
+			    gpointer private_data);
+void cuesheet_free(cuesheet_t *cuesheet);
+
+#endif
diff --git a/src/plugins/mac/mac.cpp b/src/plugins/mac/mac.cpp
--- a/src/plugins/mac/mac.cpp
+++ b/src/plugins/mac/mac.cpp
@@ -113,6 +113,43 @@ static gboolean xmms_mac_init (xmms_deco
 
     entry = xmms_decoder_medialib_entry_get (decoder);
 
+    /* 
+     * Determine whether the current entry is from a CUE or not, 
+     * by checking the XMMS_MEDIALIB_ENTRY_PROPERTY_REFERENCED_URL 
+     * and XMMS_MEDIALIB_ENTRY_PROPERTY_SUBSONG_INDEX property.
+     * These two properties are set by the CUE plugin.
+     * if from a CUE file, the start and end block should be set.
+     */
+    xmms_medialib_session_t *session = xmms_medialib_begin();
+    if (xmms_medialib_entry_property_get_str(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_REFERENCED_URL) 
+	&& xmms_medialib_entry_property_get_int(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_SUBSONG_INDEX) > 0) {
+	gint sample_rate = ape_info->GetInfo(APE_INFO_SAMPLE_RATE);
+	
+	gint start_time = 
+	    xmms_medialib_entry_property_get_int(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_START_TIME);
+
+	gint duration = 
+	    xmms_medialib_entry_property_get_int(session, entry, XMMS_MEDIALIB_ENTRY_PROPERTY_DURATION);
+
+	/* 
+	 * Avoid overflow of the caculation result.
+	 * the sample rate of most music is 44100.
+	 * so, the result is not very pricision.
+	 */
+	if (start_time > 0)
+	    start_block = (start_time / 10) * (sample_rate / 100);
+	if (duration > 0)
+	{
+	    if (start_time > 0)
+		end_block = ((start_time + duration) / 10) * (sample_rate / 100);
+	    else
+		end_block = (duration / 10) * (sample_rate / 100);
+	}
+	else 
+	    end_block = -1;
+    }
+    xmms_medialib_end(session);
+
     /* Since we have to use a source adapter, so 
      * using this function to create the decompressor is the only way.
      */
diff --git a/src/xmms/transport.c b/src/xmms/transport.c
--- a/src/xmms/transport.c
+++ b/src/xmms/transport.c
@@ -171,8 +171,12 @@ xmms_transport_url_get (const xmms_trans
 
 	session = xmms_medialib_begin ();
 
+	ret = xmms_medialib_entry_property_get_str(session, transport->entry, 
+						   XMMS_MEDIALIB_ENTRY_PROPERTY_REFERENCED_URL);
+	if (!ret) {
 	ret =  xmms_medialib_entry_property_get_str (session, transport->entry,
 	                                             XMMS_MEDIALIB_ENTRY_PROPERTY_URL);
+	}
 
 	xmms_medialib_end (session);
 
@@ -326,8 +330,12 @@ xmms_transport_open (xmms_transport_t *t
 
 	session = xmms_medialib_begin ();
 
+	url = xmms_medialib_entry_property_get_str (session, entry, 
+						   XMMS_MEDIALIB_ENTRY_PROPERTY_REFERENCED_URL);
+	if (!url) {
 	url = xmms_medialib_entry_property_get_str (session, entry,
 	                                            XMMS_MEDIALIB_ENTRY_PROPERTY_URL);
+	}
 
 	plugin = xmms_transport_plugin_find (url);
 	if (!plugin)
