Index: mppenc.c
===================================================================
--- mppenc.c	(revision 1)
+++ mppenc.c	(working copy)
@@ -53,6 +53,7 @@
 unsigned int  WriteMode       = MODE_ASK_FOR_OVERWRITE;      // overwriting a possibly existing MPC file
 int           MainQual;                 // Profiles
 unsigned int  verbose         = 0;      // more information during output
+unsigned int  NoUnicode       = 1;      // console is unicode or not (tag translation)
 UintMax_t     SamplesInWAVE   = 0;      // number of samples per channel in the WAV file
 unsigned int  Overflows       = 0;      // number of internal (filterbank) clippings
 float         MaxOverFlow     = 0.f;    // maximum overflow
@@ -205,6 +206,7 @@
              "                   publicationright, filename, recordlocation, recorddate,\n"
              "                   ean/upc, year, releasedate, genre, media, index, isrc,\n"
              "                   abstract, bibliography, introplay, media, language, ...\n"
+             "  --unicode        unicode input from console\n"
              "\n" );
 
     stderr_printf (
@@ -1169,6 +1171,9 @@
         else if ( 0 == strcmp ( arg, "ape2") ) {                                     // Mark APE as APE 2.000
             APE_Version = 2000;
         }
+        else if ( 0 == strcmp ( arg, "unicode") ) {                                  // no tag conversion
+            NoUnicode = 2;
+        }
         else if ( 0 == strcmp ( arg, "lowdelay") ) {
             LowDelay = 1;
         }
@@ -1183,135 +1188,135 @@
         else if ( 0 == strcmp ( arg, "artist" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Artist", 0, p, strlen(p), 1, 0 );
+            addtag ( "Artist", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "album" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Album", 0, p, strlen(p), 1, 0 );
+            addtag ( "Album", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "debutalbum" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Debut Album", 0, p, strlen(p), 1, 0 );
+            addtag ( "Debut Album", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "publisher" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Publisher", 0, p, strlen(p), 1, 0 );
+            addtag ( "Publisher", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "conductor" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Conductor", 0, p, strlen(p), 1, 0 );
+            addtag ( "Conductor", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "title" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Title", 0, p, strlen(p), 1, 0 );
+            addtag ( "Title", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "subtitle" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Subtitle", 0, p, strlen(p), 1, 0 );
+            addtag ( "Subtitle", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "track" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Track", 0, p, strlen(p), 1, 0 );
+            addtag ( "Track", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "comment" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Comment", 0, p, strlen(p), 1, 0 );
+            addtag ( "Comment", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "composer" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Composer", 0, p, strlen(p), 1, 0 );
+            addtag ( "Composer", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "copyright" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Copyright", 0, p, strlen(p), 1, 0 );
+            addtag ( "Copyright", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "publicationright" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Publicationright", 0, p, strlen(p), 1, 0 );
+            addtag ( "Publicationright", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "filename" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "File", 0, p, strlen(p), 1, 0 );
+            addtag ( "File", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "recordlocation" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Record Location", 0, p, strlen(p), 1, 0 );
+            addtag ( "Record Location", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "recorddate" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Record Date", 0, p, strlen(p), 1, 0 );
+            addtag ( "Record Date", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "ean/upc" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "EAN/UPC", 0, p, strlen(p), 1, 0 );
+            addtag ( "EAN/UPC", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "year" )  ||  0 == strcmp ( arg, "releasedate") ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Year", 0, p, strlen(p), 1, 0 );
+            addtag ( "Year", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "genre" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Genre", 0, p, strlen(p), 1, 0 );
+            addtag ( "Genre", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "media" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Media", 0, p, strlen(p), 1, 0 );
+            addtag ( "Media", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "index" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Index", 0, p, strlen(p), 3, 0 );
+            addtag ( "Index", 0, p, strlen(p), NoUnicode*3, 0 );
         }
         else if ( 0 == strcmp ( arg, "isrc" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "ISRC", 0, p, strlen(p), 1, 0 );
+            addtag ( "ISRC", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "abstract" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Abstract", 0, p, strlen(p), 1, 0 );
+            addtag ( "Abstract", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "bibliography" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Bibliography", 0, p, strlen(p), 1, 0 );
+            addtag ( "Bibliography", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "introplay" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Introplay", 0, p, strlen(p), 3, 0 );
+            addtag ( "Introplay", 0, p, strlen(p), NoUnicode*3, 0 );
         }
         else if ( 0 == strcmp ( arg, "media" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = argv[k];
-            addtag ( "Media", 0, p, strlen(p), 1, 0 );
+            addtag ( "Media", 0, p, strlen(p), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "tag" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
             p = strchr ( argv[k], '=' );
             if ( p == NULL )
-                addtag ( argv[k], strlen(argv[k]), "", 0, 1, 0 );
+                addtag ( argv[k], strlen(argv[k]), "", 0, NoUnicode, 0 );
             else
-                addtag ( argv[k], p-argv[k], p+1, strlen(p+1), 1, 0 );
+                addtag ( argv[k], p-argv[k], p+1, strlen(p+1), NoUnicode, 0 );
         }
         else if ( 0 == strcmp ( arg, "tagfile" ) ) {
             if ( ++k >= argc ) { stderr_printf ( errmsg, arg ); return -1; }
@@ -1322,7 +1327,7 @@
                 len = strlen (buff);
                 while ( len > 0  &&  (buff [len-1] == '\r'  ||  buff [len-1] == '\n') )
                     len--;
-                addtag ( arg, strlen(arg), buff, len, 6, 0 );
+                addtag ( arg, strlen(arg), buff, len, NoUnicode*6, 0 );
             }
             else {
                 fp = fopen ( p+1, "rb" );
@@ -1330,7 +1335,7 @@
                     fprintf ( stderr, "Can't open file '%s'.\n", p+1 );
                 }
                 else {
-                    addtag ( argv[k], p-argv[k], buff, fread (buff,1,sizeof buff,fp), 2, 3 );
+                    addtag ( argv[k], p-argv[k], buff, fread (buff,1,sizeof buff,fp), NoUnicode*2, 3 );
                     fclose (fp);
                 }
             }
Index: tags.c
===================================================================
--- tags.c	(revision 1)
+++ tags.c	(working copy)
@@ -999,6 +999,7 @@
     return 0;
 }
 
+#if 0
 static void
 FullPathName ( char* dst, size_t dstlen, const char* filename )         // Can contain stuff like ".." and "."
 {
@@ -1307,6 +1308,7 @@
     Parser        ( buff );
     return 0;
 }
+#endif
 
 
 int
@@ -1323,7 +1325,7 @@
 
     CopyTags_APE  (fp);                 // APE tags have higher priority than ID3V1 tags
     CopyTags_ID3  (fp);
-    CopyTags_Name (filename);
+//    CopyTags_Name (filename);
 
     fclose (fp);
     return 0;
