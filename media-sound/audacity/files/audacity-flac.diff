--- audacity-src-1.3.2-beta/src/export/ExportFLAC.cpp.flac	2006-10-29 01:05:27.000000000 +0200
+++ audacity-src-1.3.2-beta/src/export/ExportFLAC.cpp	2006-12-12 09:32:29.000000000 +0100
@@ -41,6 +41,13 @@
 
 #define SAMPLES_PER_RUN 8192
 
+/* FLACPP_API_VERSION_CURRENT is 6 for libFLAC++ from flac-1.1.3 (see <FLAC++/export.h>) */
+#if !defined FLACPP_API_VERSION_CURRENT || FLACPP_API_VERSION_CURRENT < 6
+#define LEGACY_FLAC
+#else
+#undef LEGACY_FLAC
+#endif
+
 static struct
 {
    bool        do_exhaustive_model_search;
@@ -58,7 +65,9 @@
       gPrefs->Read(wxT("/FileFormats/FLACBitDepth"), wxT("16"));
    
    FLAC::Encoder::File *encoder= new FLAC::Encoder::File();
+#ifdef LEGACY_FLAC
    encoder->set_filename(OSFILENAME(fName));
+#endif
    encoder->set_channels(numChannels);
    encoder->set_sample_rate(int(rate + 0.5));
 
@@ -72,7 +81,11 @@
    encoder->set_rice_parameter_search_dist(flacLevels[levelPref].rice_parameter_search_dist);
    encoder->set_max_lpc_order(flacLevels[levelPref].max_lpc_order);
 
-   encoder->init();
+#ifdef LEGACY_FLAC
+   encoder->init(); // really should check the return value here...
+#else
+   encoder->init(OSFILENAME(fName)); // really should check the return value here...
+#endif
 
    int numWaveTracks;
    WaveTrack **waveTracks;
@@ -129,7 +142,7 @@
    return !cancelling;
 }
 
-#endif // USE_LIBVORBIS
+#endif // USE_LIBFLAC
 
 
 // Indentation settings for Vim and Emacs and unique identifier for Arch, a
--- audacity-src-1.3.2-beta/src/import/ImportFLAC.cpp.flac	2006-10-29 01:05:28.000000000 +0200
+++ audacity-src-1.3.2-beta/src/import/ImportFLAC.cpp	2006-12-12 09:32:29.000000000 +0100
@@ -63,6 +63,13 @@
 #include "../WaveTrack.h"
 #include "ImportPlugin.h"
 
+/* FLACPP_API_VERSION_CURRENT is 6 for libFLAC++ from flac-1.1.3 (see <FLAC++/export.h>) */
+#if !defined FLACPP_API_VERSION_CURRENT || FLACPP_API_VERSION_CURRENT < 6
+#define LEGACY_FLAC
+#else
+#undef LEGACY_FLAC
+#endif
+
 class FLACImportFileHandle;
 
 class MyFLACFile : public FLAC::Decoder::File
@@ -264,6 +271,7 @@
 
 bool FLACImportFileHandle::Init()
 {
+#ifdef LEGACY_FLAC
    bool success = mFile->set_filename(OSFILENAME(mName));
    if (!success) {
       return false;
@@ -272,11 +280,23 @@
    if (state != FLAC__FILE_DECODER_OK) {
       return false;
    }
+#else
+   if (mFile->init(OSFILENAME(mName)) != FLAC__STREAM_DECODER_INIT_STATUS_OK) {
+      return false;
+   }
+#endif
    mFile->process_until_end_of_metadata();
+#ifdef LEGACY_FLAC
    state = mFile->get_state();
    if (state != FLAC__FILE_DECODER_OK) {
       return false;
    }
+#else
+   // not necessary to check state, error callback will catch errors, but here's how:
+   if (mFile->get_state() > FLAC__STREAM_DECODER_READ_FRAME) {
+      return false;
+   }
+#endif
    if (!mFile->is_valid() || mFile->get_was_error())
    {
       // This probably is not a FLAC file at all
@@ -340,7 +360,11 @@
       mChannels[1]->SetTeamed(true);
    }
 
+#ifdef LEGACY_FLAC
    mFile->process_until_end_of_file();
+#else
+   mFile->process_until_end_of_stream();
+#endif
    
    *outTracks = new Track *[*outNumTracks];
    for(c = 0; c < *outNumTracks; c++) {
--- audacity-src-1.3.2-beta/acinclude.m4.flac	2006-10-29 01:06:04.000000000 +0200
+++ audacity-src-1.3.2-beta/acinclude.m4	2006-12-12 09:37:56.000000000 +0100
@@ -467,10 +467,10 @@
    dnl See if FLAC is installed in the system
 
    AC_CHECK_LIB(FLAC,
-                FLAC__file_decoder_new,
+                FLAC__stream_decoder_new,
                 lib_found="yes",
                 lib_found="no",
-                -lFLAC++ -lFLAC)
+                -lFLAC++ -lFLAC -logg)
 
    AC_CHECK_HEADER(FLAC/format.h,
                    header_found="yes",
@@ -478,7 +478,7 @@
 
    if test "x$lib_found" = "xyes" && test "x$header_found" = "xyes" ; then
       LIBFLAC_SYSTEM_AVAILABLE="yes"
-      LIBFLAC_SYSTEM_LIBS="-lFLAC++ -lFLAC"
+      LIBFLAC_SYSTEM_LIBS="-lFLAC++ -lFLAC -logg"
       LIBFLAC_SYSTEM_CPPSYMBOLS="USE_LIBFLAC"
       AC_MSG_NOTICE([FLAC libraries are available as system libraries])
    else
