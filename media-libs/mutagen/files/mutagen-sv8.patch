diff -Nur mutagen-1.19/mutagen/musepack.py mutagen-1.19-new/mutagen/musepack.py
--- mutagen-1.19/mutagen/musepack.py	2009-06-15 09:17:25.000000000 +0200
+++ mutagen-1.19-new/mutagen/musepack.py	2010-04-13 11:50:10.000000000 +0200
@@ -1,6 +1,7 @@
 # A Musepack reader/tagger
 #
 # Copyright 2006 Lukas Lalinsky <lalinsky@gmail.com>
+# Copyright 2010 Christoph Reiter <christoph.reiter@gmx.at>
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License version 2 as
@@ -59,44 +60,111 @@
             header = fileobj.read(32)
             if len(header) != 32:
                 raise MusepackHeaderError("not a Musepack file")
-        # SV7
-        if header.startswith("MP+"):
-            self.version = ord(header[3]) & 0xF
-            if self.version < 7:
-                raise MusepackHeaderError("not a Musepack file")
-            frames = cdata.uint_le(header[4:8])
-            flags = cdata.uint_le(header[8:12])
-
-            self.title_peak, self.title_gain = struct.unpack(
-                "<Hh", header[12:16])
-            self.album_peak, self.album_gain = struct.unpack(
-                "<Hh", header[16:20])
-            self.title_gain /= 100.0
-            self.album_gain /= 100.0
-            self.title_peak /= 65535.0
-            self.album_peak /= 65535.0
-
-            self.sample_rate = RATES[(flags >> 16) & 0x0003]
-            self.bitrate = 0
-        # SV4-SV6
+        #SV8 http://trac.musepack.net/trac/wiki/SV8Specification
+        if header.startswith("MPCK"):
+            fileobj.seek(-28, 1)
+            samples_start = 0
+            samples_end = 0
+            while 1:
+                frame_type = fileobj.read(2)
+                if len(frame_type) != 2 or not 'AA' <= frame_type <= 'ZZ':
+                    raise MusepackHeaderError("Invalid Frame")
+
+                frame_size, slen = self.__get_sv8_int(fileobj)
+                data_size = frame_size - 2 - slen
+
+                if frame_type == "SH":
+                    fileobj.seek(4, 1)
+                    try:
+                        self.version = ord(fileobj.read(1))
+                        samples, l1 = self.__get_sv8_int(fileobj)
+                        samples_skip, l2 = self.__get_sv8_int(fileobj)
+                    except (IOError, TypeError):
+                        raise MusepackHeaderError("Invalid Frame")
+                    rest_size = data_size - 5 - l1 - l2
+                    data = fileobj.read(rest_size)
+                    if len(data) != rest_size:
+                        raise MusepackHeaderError("Invalid Frame")
+                    self.sample_rate = RATES[ord(data[-2]) >> 5]
+                    self.channels = (ord(data[-1]) >> 4) + 1
+                elif frame_type == "RG":
+                    data = fileobj.read(data_size)
+                    if len(data) != data_size:
+                        raise MusepackHeaderError("Invalid Frame")
+                    self.title_gain = 64.82 - cdata.short_be(data[1:3]) / 256.0
+                    self.title_peak = (10 ** (cdata.short_be(data[3:5]) /
+                        (256.0 * 20)) / 65535.0)
+                    self.album_gain = 64.82 - cdata.short_be(data[5:7]) / 256.0
+                    self.album_peak = (10 ** (cdata.short_be(data[7:9]) /
+                        (256.0 * 20)) / 65535.0)
+                else:
+                    fileobj.seek(data_size, 1)
+                    if not samples_start and frame_type == "AP":
+                        samples_start = fileobj.tell() * 8 - frame_size
+                    elif frame_type == "SE":
+                        samples_end = fileobj.tell() * 8 - frame_size
+                        break
+
+            samples_real = float(samples - samples_skip)
+            if samples_real:
+                samples_size = samples_end - samples_start
+                self.bitrate = int(samples_size * self.sample_rate
+                    / samples_real)
+                self.length = samples_real / self.sample_rate
+            else:
+                self.bitrate = 0
+                self.length = 0
         else:
-            header_dword = cdata.uint_le(header[0:4])
-            self.version = (header_dword >> 11) & 0x03FF;
-            if self.version < 4 or self.version > 6:
-                raise MusepackHeaderError("not a Musepack file")
-            self.bitrate = (header_dword >> 23) & 0x01FF;
-            self.sample_rate = 44100
-            if self.version >= 5:
+            # SV7
+            if header.startswith("MP+"):
+                self.version = ord(header[3]) & 0xF
+                if self.version < 7:
+                    raise MusepackHeaderError("not a Musepack file")
                 frames = cdata.uint_le(header[4:8])
+                flags = cdata.uint_le(header[8:12])
+
+                self.title_peak, self.title_gain = struct.unpack(
+                    "<Hh", header[12:16])
+                self.album_peak, self.album_gain = struct.unpack(
+                    "<Hh", header[16:20])
+                self.title_gain /= 100.0
+                self.album_gain /= 100.0
+                self.title_peak /= 65535.0
+                self.album_peak /= 65535.0
+
+                self.sample_rate = RATES[(flags >> 16) & 0x0003]
+                self.bitrate = 0
+            # SV4-SV6
             else:
-                frames = cdata.ushort_le(header[6:8])
-            if self.version < 6:
-                frames -= 1
-        self.channels = 2
-        self.length = float(frames * 1152 - 576) / self.sample_rate
-        if not self.bitrate and self.length != 0:
-            fileobj.seek(0, 2)
-            self.bitrate = int(fileobj.tell() * 8 / (self.length * 1000) + 0.5)
+                header_dword = cdata.uint_le(header[0:4])
+                self.version = (header_dword >> 11) & 0x03FF;
+                if self.version < 4 or self.version > 6:
+                    raise MusepackHeaderError("not a Musepack file")
+                self.bitrate = (header_dword >> 23) & 0x01FF;
+                self.sample_rate = 44100
+                if self.version >= 5:
+                    frames = cdata.uint_le(header[4:8])
+                else:
+                    frames = cdata.ushort_le(header[6:8])
+                if self.version < 6:
+                    frames -= 1
+            self.channels = 2
+            self.length = float(frames * 1152 - 576) / self.sample_rate
+            if not self.bitrate and self.length != 0:
+                fileobj.seek(0, 2)
+                length = fileobj.tell() * 8
+                self.bitrate = int(length / (self.length * 1000) + 0.5)
+
+    @staticmethod
+    def __get_sv8_int(fileobj):
+        num = 0
+        for i in xrange(9):
+            c = fileobj.read(1)
+            if len(c) != 1: raise IOError
+            num = (num << 7) | (ord(c) & 0x7F)
+            if not ord(c) & 0x80:
+                return num, i + 1
+        return 0, 0
 
     def pprint(self):
         if self.version >= 7:
@@ -112,7 +180,8 @@
     _mimes = ["audio/x-musepack", "audio/x-mpc"]
 
     def score(filename, fileobj, header):
-        return header.startswith("MP+") + filename.endswith(".mpc")
+        return (header.startswith("MP+") + header.startswith("MPCK") +
+            filename.endswith(".mpc"))
     score = staticmethod(score)
 
 Open = Musepack
Binary files mutagen-1.19/sv8_header.mpc and mutagen-1.19-new/sv8_header.mpc differ
Binary files mutagen-1.19/tests/data/sv8_header.mpc and mutagen-1.19-new/tests/data/sv8_header.mpc differ
diff -Nur mutagen-1.19/tests/test_musepack.py mutagen-1.19-new/tests/test_musepack.py
--- mutagen-1.19/tests/test_musepack.py	2009-08-15 01:13:12.000000000 +0200
+++ mutagen-1.19-new/tests/test_musepack.py	2010-04-13 09:16:08.000000000 +0200
@@ -11,6 +11,7 @@
     uses_mmap = False
 
     def setUp(self):
+        self.sv8 = Musepack(os.path.join("tests", "data", "sv8_header.mpc"))
         self.sv7 = Musepack(os.path.join("tests", "data", "click.mpc"))
         self.sv5 = Musepack(os.path.join("tests", "data", "sv5_header.mpc"))
         self.sv4 = Musepack(os.path.join("tests", "data", "sv4_header.mpc"))
@@ -21,26 +22,35 @@
             Musepack, os.path.join("tests", "data", "almostempty.mpc"))
 
     def test_channels(self):
+        self.failUnlessEqual(self.sv8.info.channels, 2)
         self.failUnlessEqual(self.sv7.info.channels, 2)
         self.failUnlessEqual(self.sv5.info.channels, 2)
         self.failUnlessEqual(self.sv4.info.channels, 2)
 
     def test_sample_rate(self):
+        self.failUnlessEqual(self.sv8.info.sample_rate, 44100)
         self.failUnlessEqual(self.sv7.info.sample_rate, 44100)
         self.failUnlessEqual(self.sv5.info.sample_rate, 44100)
         self.failUnlessEqual(self.sv4.info.sample_rate, 44100)
 
     def test_bitrate(self):
+        self.failUnlessEqual(self.sv8.info.bitrate, 348)
         self.failUnlessEqual(self.sv7.info.bitrate, 195)
         self.failUnlessEqual(self.sv5.info.bitrate, 0)
         self.failUnlessEqual(self.sv4.info.bitrate, 0)
 
     def test_length(self):
+        self.failUnlessAlmostEqual(self.sv8.info.length, 1.49, 1)
         self.failUnlessAlmostEqual(self.sv7.info.length, 0.07, 2)
         self.failUnlessAlmostEqual(self.sv5.info.length, 26.3, 1)
         self.failUnlessAlmostEqual(self.sv4.info.length, 26.3, 1)
 
     def test_gain(self):
+        self.failUnlessAlmostEqual(self.sv8.info.title_gain, -4.668, 3)
+        self.failUnlessAlmostEqual(self.sv8.info.title_peak, 0.5288, 3)
+        self.failUnlessEqual(self.sv8.info.title_gain, self.sv8.info.album_gain)
+        self.failUnlessEqual(self.sv8.info.title_peak, self.sv8.info.album_peak)
+
         self.failUnlessAlmostEqual(self.sv7.info.title_gain, 9.27, 6)
         self.failUnlessAlmostEqual(self.sv7.info.title_peak, 0.1149, 4)
         self.failUnlessEqual(self.sv7.info.title_gain, self.sv7.info.album_gain)
@@ -58,8 +68,11 @@
     def test_almost_my_file(self):
         self.failUnlessRaises(
             MusepackHeaderError, MusepackInfo, StringIO("MP+" + "\x00" * 100))
+        self.failUnlessRaises(
+            MusepackHeaderError, MusepackInfo, StringIO("MPCK" + "\x00" * 100))
 
     def test_pprint(self):
+        self.sv8.pprint()
         self.sv7.pprint()
         self.sv5.pprint()
         self.sv4.pprint()
