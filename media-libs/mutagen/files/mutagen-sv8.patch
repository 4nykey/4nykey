Index: mutagen/musepack.py
===================================================================
--- mutagen/musepack.py	(revision 106)
+++ mutagen/musepack.py	(working copy)
@@ -1,6 +1,7 @@
 # A Musepack reader/tagger
 #
 # Copyright 2006 Lukas Lalinsky <lalinsky@gmail.com>
+# Copyright 2010 Christoph Reiter <christoph.reiter@gmx.at>
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License version 2 as
@@ -28,6 +29,33 @@
 
 RATES = [44100, 48000, 37800, 32000]
 
+def _parse_sv8_int(fileobj, limit=9):
+    """Reads bytes from fileobj until the MSB is zero.
+    All 7 LSB will be merged to a big endian uint.
+
+    In case no MSB is zero or the file ends before limit is reached,
+    IOError will be raised.
+
+    Returns (parsed number, number of bytes read)
+    """
+    num = 0
+    for i in xrange(limit):
+        c = fileobj.read(1)
+        if len(c) != 1: raise IOError
+        num = (num << 7) | (ord(c) & 0x7F)
+        if not ord(c) & 0x80:
+            return num, i + 1
+    if limit > 0:
+        raise IOError
+    return 0, 0
+
+def _calc_sv8_gain(gain):
+    # 64.82 taken from mpcdec
+    return 64.82 - gain / 256.0
+
+def _calc_sv8_peak(peak):
+    return (10 ** (peak / (256.0 * 20.0)) / 65535.0)
+
 class MusepackInfo(object):
     """Musepack stream information.
 
@@ -42,23 +70,116 @@
     title_gain, title_peak -- Replay Gain and peak data for this song
     album_gain, album_peak -- Replay Gain and peak data for this album
 
-    These attributes are only available in stream version 7. The
+    These attributes are only available in stream version 7/8. The
     gains are a float, +/- some dB. The peaks are a percentage [0..1] of
     the maximum amplitude. This means to get a number comparable to
     VorbisGain, you must multiply the peak by 2.
     """
 
     def __init__(self, fileobj):
-        header = fileobj.read(32)
-        if len(header) != 32:
+        header = fileobj.read(4)
+        if len(header) != 4:
             raise MusepackHeaderError("not a Musepack file")
+
         # Skip ID3v2 tags
         if header[:3] == "ID3":
-            size = 10 + BitPaddedInt(header[6:10])
+            header = fileobj.read(6)
+            if len(header) != 6:
+                raise MusepackHeaderError("not a Musepack file")
+            size = 10 + BitPaddedInt(header[2:6])
             fileobj.seek(size)
-            header = fileobj.read(32)
-            if len(header) != 32:
+            header = fileobj.read(4)
+            if len(header) != 4:
                 raise MusepackHeaderError("not a Musepack file")
+
+        if header.startswith("MPCK"):
+            self.__parse_sv8(fileobj)
+        else:
+            self.__parse_sv467(fileobj)
+
+        if not self.bitrate and self.length != 0:
+            fileobj.seek(0, 2)
+            self.bitrate = int(round(fileobj.tell() * 8 / self.length))
+
+    def __parse_sv8(self, fileobj):
+        #SV8 http://trac.musepack.net/trac/wiki/SV8Specification
+
+        key_size = 2
+        mandatory_packets = ["SH", "RG"]
+
+        def check_frame_key(key):
+            if len(frame_type) != key_size or not 'AA' <= frame_type <= 'ZZ':
+                raise MusepackHeaderError("Invalid frame key.")
+
+        frame_type = fileobj.read(key_size)
+        check_frame_key(frame_type)
+
+        while frame_type not in ("AP", "SE") and mandatory_packets:
+            try:
+                frame_size, slen = _parse_sv8_int(fileobj)
+            except IOError:
+                raise MusepackHeaderError("Invalid packet size.")
+            data_size = frame_size - key_size - slen
+
+            if frame_type == "SH":
+                mandatory_packets.remove(frame_type)
+                fileobj.seek(4, 1)
+                try:
+                    self.version = ord(fileobj.read(1))
+                except TypeError:
+                    raise MusepackHeaderError("SH packet ended unexpectedly.")
+                try:
+                    samples, l1 = _parse_sv8_int(fileobj)
+                    samples_skip, l2 = _parse_sv8_int(fileobj)
+                except IOError:
+                    raise MusepackHeaderError(
+                        "SH packet: Invalid sample counts.")
+                left_size = data_size - 5 - l1 - l2
+                if left_size != 2:
+                    raise MusepackHeaderError("Invalid SH packet size.")
+                data = fileobj.read(left_size)
+                if len(data) != left_size:
+                    raise MusepackHeaderError("SH packet ended unexpectedly.")
+                self.sample_rate = RATES[ord(data[-2]) >> 5]
+                self.channels = (ord(data[-1]) >> 4) + 1
+            elif frame_type == "RG":
+                mandatory_packets.remove(frame_type)
+                data = fileobj.read(data_size)
+                if data_size != 9:
+                    raise MusepackHeaderError("Invalid RG packet size.")
+                if len(data) != data_size:
+                    raise MusepackHeaderError("RG packet ended unexpectedly.")
+                title_gain = cdata.short_be(data[1:3])
+                title_peak = cdata.short_be(data[3:5])
+                album_gain = cdata.short_be(data[5:7])
+                album_peak = cdata.short_be(data[7:9])
+                if title_gain:
+                    self.title_gain = _calc_sv8_gain(title_gain)
+                if title_peak:
+                    self.title_peak = _calc_sv8_peak(title_peak)
+                if album_gain:
+                    self.album_gain = _calc_sv8_gain(album_gain)
+                if album_peak:
+                    self.album_peak = _calc_sv8_peak(album_peak)
+            else:
+                fileobj.seek(data_size, 1)
+
+            frame_type = fileobj.read(key_size)
+            check_frame_key(frame_type)
+
+        if mandatory_packets:
+            raise MusepackHeaderError("Missing mandatory packets: %s."
+                % ", ".join(mandatory_packets))
+
+        self.length = float(samples - samples_skip) / self.sample_rate
+        self.bitrate = 0
+
+    def __parse_sv467(self, fileobj):
+        fileobj.seek(-4, 1)
+        header = fileobj.read(32)
+        if len(header) != 32:
+            raise MusepackHeaderError("not a Musepack file")
+
         # SV7
         if header.startswith("MP+"):
             self.version = ord(header[3]) & 0xF
@@ -92,27 +213,28 @@
                 frames = cdata.ushort_le(header[6:8])
             if self.version < 6:
                 frames -= 1
+
         self.channels = 2
         self.length = float(frames * 1152 - 576) / self.sample_rate
-        if not self.bitrate and self.length != 0:
-            fileobj.seek(0, 2)
-            self.bitrate = int(fileobj.tell() * 8 / (self.length * 1000) + 0.5)
 
     def pprint(self):
-        if self.version >= 7:
-            rg_data = ", Gain: %+0.2f (title), %+0.2f (album)" %(
-                self.title_gain, self.album_gain)
-        else:
-            rg_data = ""
-        return "Musepack, %.2f seconds, %d Hz%s" % (
-            self.length, self.sample_rate, rg_data)
+        rg_data = []
+        if hasattr(self, "title_gain"):
+            rg_data.append("%+0.2f (title)" % self.title_gain)
+        if hasattr(self, "album_gain"):
+            rg_data.append("%+0.2f (album)" % self.album_gain)
+        rg_data = (rg_data and ", Gain: " + ", ".join(rg_data)) or ""
 
+        return "Musepack SV%d, %.2f seconds, %d Hz, %d bps%s" % (
+            self.version, self.length, self.sample_rate, self.bitrate, rg_data)
+
 class Musepack(APEv2File):
     _Info = MusepackInfo
     _mimes = ["audio/x-musepack", "audio/x-mpc"]
 
     def score(filename, fileobj, header):
-        return header.startswith("MP+") + filename.endswith(".mpc")
+        return (header.startswith("MP+") + header.startswith("MPCK") +
+            filename.endswith(".mpc"))
     score = staticmethod(score)
 
 Open = Musepack
Index: tests/test_musepack.py
===================================================================
--- tests/test_musepack.py	(revision 106)
+++ tests/test_musepack.py	(working copy)
@@ -11,6 +11,7 @@
     uses_mmap = False
 
     def setUp(self):
+        self.sv8 = Musepack(os.path.join("tests", "data", "sv8_header.mpc"))
         self.sv7 = Musepack(os.path.join("tests", "data", "click.mpc"))
         self.sv5 = Musepack(os.path.join("tests", "data", "sv5_header.mpc"))
         self.sv4 = Musepack(os.path.join("tests", "data", "sv4_header.mpc"))
@@ -21,26 +22,35 @@
             Musepack, os.path.join("tests", "data", "almostempty.mpc"))
 
     def test_channels(self):
+        self.failUnlessEqual(self.sv8.info.channels, 2)
         self.failUnlessEqual(self.sv7.info.channels, 2)
         self.failUnlessEqual(self.sv5.info.channels, 2)
         self.failUnlessEqual(self.sv4.info.channels, 2)
 
     def test_sample_rate(self):
+        self.failUnlessEqual(self.sv8.info.sample_rate, 44100)
         self.failUnlessEqual(self.sv7.info.sample_rate, 44100)
         self.failUnlessEqual(self.sv5.info.sample_rate, 44100)
         self.failUnlessEqual(self.sv4.info.sample_rate, 44100)
 
     def test_bitrate(self):
-        self.failUnlessEqual(self.sv7.info.bitrate, 195)
-        self.failUnlessEqual(self.sv5.info.bitrate, 0)
-        self.failUnlessEqual(self.sv4.info.bitrate, 0)
+        self.failUnlessEqual(self.sv8.info.bitrate, 609)
+        self.failUnlessEqual(self.sv7.info.bitrate, 194530)
+        self.failUnlessEqual(self.sv5.info.bitrate, 39)
+        self.failUnlessEqual(self.sv4.info.bitrate, 39)
 
     def test_length(self):
+        self.failUnlessAlmostEqual(self.sv8.info.length, 1.49, 1)
         self.failUnlessAlmostEqual(self.sv7.info.length, 0.07, 2)
         self.failUnlessAlmostEqual(self.sv5.info.length, 26.3, 1)
         self.failUnlessAlmostEqual(self.sv4.info.length, 26.3, 1)
 
     def test_gain(self):
+        self.failUnlessAlmostEqual(self.sv8.info.title_gain, -4.668, 3)
+        self.failUnlessAlmostEqual(self.sv8.info.title_peak, 0.5288, 3)
+        self.failUnlessEqual(self.sv8.info.title_gain, self.sv8.info.album_gain)
+        self.failUnlessEqual(self.sv8.info.title_peak, self.sv8.info.album_peak)
+
         self.failUnlessAlmostEqual(self.sv7.info.title_gain, 9.27, 6)
         self.failUnlessAlmostEqual(self.sv7.info.title_peak, 0.1149, 4)
         self.failUnlessEqual(self.sv7.info.title_gain, self.sv7.info.album_gain)
@@ -58,8 +68,11 @@
     def test_almost_my_file(self):
         self.failUnlessRaises(
             MusepackHeaderError, MusepackInfo, StringIO("MP+" + "\x00" * 100))
+        self.failUnlessRaises(
+            MusepackHeaderError, MusepackInfo, StringIO("MPCK" + "\x00" * 100))
 
     def test_pprint(self):
+        self.sv8.pprint()
         self.sv7.pprint()
         self.sv5.pprint()
         self.sv4.pprint()
